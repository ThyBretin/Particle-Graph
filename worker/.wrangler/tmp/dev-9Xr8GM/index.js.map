{
  "version": 3,
  "sources": ["wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/@babel/parser/src/util/location.ts", "../../../node_modules/@babel/parser/src/parse-error/module-errors.ts", "../../../node_modules/@babel/parser/src/parse-error/to-node-description.ts", "../../../node_modules/@babel/parser/src/parse-error/standard-errors.ts", "../../../node_modules/@babel/parser/src/parse-error/strict-mode-errors.ts", "../../../node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.ts", "../../../node_modules/@babel/parser/src/parse-error.ts", "../../../node_modules/@babel/parser/src/options.ts", "../../../node_modules/@babel/parser/src/plugins/estree.ts", "../../../node_modules/@babel/parser/src/tokenizer/context.ts", "../../../node_modules/@babel/parser/src/tokenizer/types.ts", "../../../node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts", "../../../node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts", "../../../node_modules/@babel/parser/src/util/identifier.ts", "../../../node_modules/@babel/parser/src/util/scope.ts", "../../../node_modules/@babel/parser/src/plugins/flow/scope.ts", "../../../node_modules/@babel/parser/src/parser/base.ts", "../../../node_modules/@babel/parser/src/parser/comments.ts", "../../../node_modules/@babel/parser/src/util/whitespace.ts", "../../../node_modules/@babel/parser/src/tokenizer/state.ts", "../../../node_modules/@babel/babel-helper-string-parser/src/index.ts", "../../../node_modules/@babel/parser/src/tokenizer/index.ts", "../../../node_modules/@babel/parser/src/util/class-scope.ts", "../../../node_modules/@babel/parser/src/util/expression-scope.ts", "../../../node_modules/@babel/parser/src/util/production-parameter.ts", "../../../node_modules/@babel/parser/src/parser/util.ts", "../../../node_modules/@babel/parser/src/parser/node.ts", "../../../node_modules/@babel/parser/src/plugins/flow/index.ts", "../../../node_modules/@babel/parser/src/plugins/jsx/xhtml.ts", "../../../node_modules/@babel/parser/src/plugins/jsx/index.ts", "../../../node_modules/@babel/parser/src/plugins/typescript/scope.ts", "../../../node_modules/@babel/parser/src/parser/lval.ts", "../../../node_modules/@babel/parser/src/plugins/typescript/index.ts", "../../../node_modules/@babel/parser/src/plugins/placeholders.ts", "../../../node_modules/@babel/parser/src/plugins/v8intrinsic.ts", "../../../node_modules/@babel/parser/src/plugin-utils.ts", "../../../node_modules/@babel/parser/src/parser/expression.ts", "../../../node_modules/@babel/parser/src/parser/statement.ts", "../../../node_modules/@babel/parser/src/parser/index.ts", "../../../node_modules/@babel/parser/src/index.ts", "../bundle-GuI2Dq/middleware-loader.entry.ts", "../bundle-GuI2Dq/middleware-insertion-facade.js", "../../../src/index.js", "../../../src/api/graph.js", "../../../src/utils/parser.js", "../../../src/utils/crypto.js", "../../../src/api/particle.js", "../../../src/api/auth.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/Thy/Particle-Graph/worker/.wrangler/tmp/dev-9Xr8GM",
  "sourcesContent": ["", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n", "const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  YieldNotInGeneratorFunction:\n    \"'yield' is only allowed within generator functions.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: process.env.BABEL_8_BREAKING\n    ? 'Topic references are only supported when using the `\"proposal\": \"hack\"` version of the pipeline proposal.'\n    : 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  ...(process.env.BABEL_8_BREAKING\n    ? {}\n    : {\n        // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n        // are retained for backwards compatibility\n        // with the deprecated smart-mix pipe operator proposal plugin.\n        // They are subject to removal in a future major version.\n        PipelineBodyNoArrow:\n          'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n        PipelineBodySequenceExpression:\n          \"Pipeline body may not be a comma-separated sequence expression.\",\n        PipelineHeadSequenceExpression:\n          \"Pipeline head should not be a comma-separated sequence expression.\",\n        PipelineTopicUnused:\n          \"Pipeline is in topic style but does not use topic reference.\",\n        PrimaryTopicNotAllowed:\n          \"Topic reference was used in a lexical context without topic binding.\",\n        PrimaryTopicRequiresSmartPipeline:\n          'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n      }),\n} satisfies ParseErrorTemplates;\n", "import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n", "import type { Plugin } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  /**\n   * By default, import and export declarations can only appear at a program's top level.\n   * Setting this option to true allows them anywhere where a statement is allowed.\n   */\n  allowImportExportEverywhere?: boolean;\n\n  /**\n   * By default, await use is not allowed outside of an async function.\n   * Set this to true to accept such code.\n   */\n  allowAwaitOutsideFunction?: boolean;\n\n  /**\n   * By default, a return statement at the top level raises an error.\n   * Set this to true to accept such code.\n   */\n  allowReturnOutsideFunction?: boolean;\n\n  /**\n   * By default, new.target use is not allowed outside of a function or class.\n   * Set this to true to accept such code.\n   */\n  allowNewTargetOutsideFunction?: boolean;\n\n  allowSuperOutsideMethod?: boolean;\n\n  /**\n   * By default, exported identifiers must refer to a declared variable.\n   * Set this to true to allow export statements to reference undeclared variables.\n   */\n  allowUndeclaredExports?: boolean;\n\n  /**\n   * By default, yield use is not allowed outside of a generator function.\n   * Set this to true to accept such code.\n   */\n\n  allowYieldOutsideFunction?: boolean;\n\n  /**\n   * By default, Babel parser JavaScript code according to Annex B syntax.\n   * Set this to `false` to disable such behavior.\n   */\n  annexB?: boolean;\n\n  /**\n   * By default, Babel attaches comments to adjacent AST nodes.\n   * When this option is set to false, comments are not attached.\n   * It can provide up to 30% performance improvement when the input code has many comments.\n   * @babel/eslint-parser will set it for you.\n   * It is not recommended to use attachComment: false with Babel transform,\n   * as doing so removes all the comments in output code, and renders annotations such as\n   * /* istanbul ignore next *\\/ nonfunctional.\n   */\n  attachComment?: boolean;\n\n  /**\n   * By default, Babel always throws an error when it finds some invalid code.\n   * When this option is set to true, it will store the parsing error and\n   * try to continue parsing the invalid input file.\n   */\n  errorRecovery?: boolean;\n\n  /**\n   * Indicate the mode the code should be parsed in.\n   * Can be one of \"script\", \"module\", or \"unambiguous\". Defaults to \"script\".\n   * \"unambiguous\" will make @babel/parser attempt to guess, based on the presence\n   * of ES6 import or export statements.\n   * Files with ES6 imports and exports are considered \"module\" and are otherwise \"script\".\n   */\n  sourceType?: \"script\" | \"module\" | \"unambiguous\";\n\n  /**\n   * Correlate output AST nodes with their source filename.\n   * Useful when generating code and source maps from the ASTs of multiple input files.\n   */\n  sourceFilename?: string;\n\n  /**\n   * By default, all source indexes start from 0.\n   * You can provide a start index to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startIndex?: number;\n\n  /**\n   * By default, the first line of code parsed is treated as line 1.\n   * You can provide a line number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startLine?: number;\n\n  /**\n   * By default, the parsed code is treated as if it starts from line 1, column 0.\n   * You can provide a column number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startColumn?: number;\n\n  /**\n   * Array containing the plugins that you want to enable.\n   */\n  plugins?: Plugin[];\n\n  /**\n   * Should the parser work in strict mode.\n   * Defaults to true if sourceType === 'module'. Otherwise, false.\n   */\n  strictMode?: boolean;\n\n  /**\n   * Adds a ranges property to each node: [node.start, node.end]\n   */\n  ranges?: boolean;\n\n  /**\n   * Adds all parsed tokens to a tokens property on the File node.\n   */\n  tokens?: boolean;\n\n  /**\n   * By default, the parser adds information about parentheses by setting\n   * `extra.parenthesized` to `true` as needed.\n   * When this option is `true` the parser creates `ParenthesizedExpression`\n   * AST nodes instead of using the `extra` property.\n   */\n  createParenthesizedExpressions?: boolean;\n\n  /**\n   * The default is false in Babel 7 and true in Babel 8\n   * Set this to true to parse it as an `ImportExpression` node.\n   * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.\n   */\n  createImportExpressions?: boolean;\n}\n\nexport const enum OptionFlags {\n  AllowAwaitOutsideFunction = 1 << 0,\n  AllowReturnOutsideFunction = 1 << 1,\n  AllowNewTargetOutsideFunction = 1 << 2,\n  AllowImportExportEverywhere = 1 << 3,\n  AllowSuperOutsideMethod = 1 << 4,\n  AllowYieldOutsideFunction = 1 << 5,\n  AllowUndeclaredExports = 1 << 6,\n  Ranges = 1 << 7,\n  Tokens = 1 << 8,\n  CreateImportExpressions = 1 << 9,\n  CreateParenthesizedExpressions = 1 << 10,\n  ErrorRecovery = 1 << 11,\n  AttachComment = 1 << 12,\n  AnnexB = 1 << 13,\n}\n\ntype OptionsWithDefaults = Required<Options>;\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // TODO\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    allowYieldOutsideFunction: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  return options;\n}\n", "import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.optionFlags & OptionFlags.Tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition | N.EstreeTSAbstractMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      const { typeParameters } = node;\n      if (typeParameters) {\n        delete node.typeParameters;\n        funcNode.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(funcNode, typeParameters);\n      }\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      if (process.env.BABEL_8_BREAKING && this.hasPlugin(\"typescript\")) {\n        if (!funcNode.body) {\n          (funcNode as unknown as N.EstreeTSEmptyBodyFunctionExpression).type =\n            \"TSEmptyBodyFunctionExpression\";\n        }\n        // @ts-expect-error todo(flow->ts) property not defined for all types in union\n        if (node.abstract) {\n          return this.finishNode(\n            // @ts-expect-error cast methods to estree types\n            node as Undone<N.EstreeTSAbstractMethodDefinition>,\n            \"TSAbstractMethodDefinition\",\n          );\n        }\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        (propertyNode as unknown as N.EstreeTSAbstractPropertyDefinition).type =\n          \"TSAbstractPropertyDefinition\";\n      } else {\n        (propertyNode as unknown as N.EstreePropertyDefinition).type =\n          \"PropertyDefinition\";\n      }\n      return propertyNode;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        (propertyNode as unknown as N.EstreeTSAbstractPropertyDefinition).type =\n          \"TSAbstractPropertyDefinition\";\n      } else {\n        (propertyNode as unknown as N.EstreePropertyDefinition).type =\n          \"PropertyDefinition\";\n      }\n      propertyNode.computed = false;\n      return propertyNode;\n    }\n\n    parseClassAccessorProperty(\n      this: Parser,\n      node: N.ClassAccessorProperty,\n    ): any {\n      const accessorPropertyNode = super.parseClassAccessorProperty(node);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return accessorPropertyNode;\n        }\n      }\n      (accessorPropertyNode as unknown as N.EstreeAccessorProperty).type =\n        \"AccessorProperty\";\n      return accessorPropertyNode;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        (node as N.Node as N.EstreeImportExpression).options =\n          (node.arguments[1] as N.Expression) ?? null;\n        // compatibility with previous ESTree AST\n        // TODO(Babel 8): Remove this\n        (node as N.Node as N.EstreeImportExpression).attributes =\n          (node.arguments[1] as N.Expression) ?? null;\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          // strip Optional prefix\n          (node as unknown as N.CallExpression | N.MemberExpression).type =\n            node.type.substring(8) as \"CallExpression\" | \"MemberExpression\";\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        // @ts-expect-error not in the type definitions\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n", "// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n", "import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.placeholder;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.placeholder;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "import type { OptionFlags, Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare optionFlags: OptionFlags;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  declare startIndex: number;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  sourceToOffsetPos(sourcePos: number) {\n    return sourcePos + this.startIndex;\n  }\n\n  offsetToSourcePos(offsetPos: number) {\n    return offsetPos - this.startIndex;\n  }\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n", "/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (\n        this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) ===\n        charCodes.comma\n      ) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          case \"TSEnumDeclaration\":\n            if (!process.env.BABEL_8_BREAKING) {\n              adjustInnerComments(node, node.members, commentWS);\n            } else {\n              setInnerComments(node, comments);\n            }\n            break;\n          case \"TSEnumBody\":\n            adjustInnerComments(node, node.members, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n", "import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  startIndex: number;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn,\n  }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(\n      startLine,\n      startColumn,\n      startIndex,\n    );\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(\n      this.curLine,\n      this.pos - this.lineStart,\n      this.pos + this.startIndex,\n    );\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: State[\"curPosition\"];\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "/*:: declare var invariant; */\n\nimport { OptionFlags, type Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.optionFlags & OptionFlags.Tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments: N.Comment[] =\n      this.optionFlags & OptionFlags.AttachComment ? [] : null;\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments?.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        this.sourceToOffsetPos(firstInvalidLoc.pos),\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!(this.optionFlags & OptionFlags.ErrorRecovery)) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!(this.optionFlags & OptionFlags.ErrorRecovery)) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n", "import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n", "import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\nimport type { Undone } from \"../parser/node.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M | V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Undone<Node>,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n", "import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.offsetToSourcePos(this.state.lastTokEndLoc.index),\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    if (this.optionFlags & OptionFlags.AllowYieldOutsideFunction) {\n      paramFlags |= ParamKind.PARAM_YIELD;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to null\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKeyLoc**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n *   It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n", "import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.optionFlags & OptionFlags.Ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n    if (this.optionFlags & OptionFlags.AttachComment) {\n      this.processComment(node as T);\n    }\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.FlowDeclareExportDeclaration;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    flowInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    flowParseTypeParameterInstantiationInExpression():\n      | N.TypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.flowParseTypeParameterInstantiation();\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n\n      this.state.inType = true;\n      node.params = [];\n      this.flowInTopLevelContext(() => {\n        this.expect(tt.lt);\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n        while (!this.match(tt.gt)) {\n          node.params.push(this.flowParseType());\n          if (!this.match(tt.gt)) {\n            this.expect(tt.comma);\n          }\n        }\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      });\n\n      this.state.inType = oldInType;\n      if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      if (this.reScan_lt() !== tt.lt) return;\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the fact that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (\n        node.superClass &&\n        (this.match(tt.lt) ||\n          // handles `class extends C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        } else {\n          node.superTypeParameters =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow &&\n          !this.state.noArrowAt.includes(\n            this.sourceToOffsetPos(this.state.start),\n          ),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments =\n          this.flowParseTypeParameterInstantiationInExpression();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        (this.match(tt.lt) ||\n          // also handles `new C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.shouldParseTypes()) {\n        if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n", "import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport type ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n", "import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        (node as Node).type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        (node as Node).type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        (node as Node).type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      (prop as Node).type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement | null)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      this.toAssignableListItem(exprList, i, isLHS);\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  toAssignableListItem(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    index: number,\n    isLHS: boolean,\n  ): void {\n    const node = exprList[index];\n    if (node.type === \"SpreadElement\") {\n      (node as unknown as RestElement).type = \"RestElement\";\n      const arg = node.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ true);\n      this.toAssignable(arg, isLHS);\n    } else {\n      this.toAssignable(node, isLHS);\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n          if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(\n              Errors.UnsupportedParameterDecorator,\n              this.state.startLoc,\n            );\n          }\n          // invariant: hasPlugin(\"decorators-legacy\")\n          while (this.match(tt.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n        elts.push(this.parseBindingElement(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseBindingElement(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n", "import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\nimport { OptionFlags } from \"../../options.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list can only include identifiers or qualified-names with optional type arguments.`,\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nfunction tsIsEntityName(\n  node: N.Expression,\n): node is N.MemberExpression | N.Identifier | N.TsInstantiationExpression {\n  if (node.extra?.parenthesized) {\n    return false;\n  }\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return !node.computed && tsIsEntityName(node.object);\n    case \"TSInstantiationExpression\":\n      return tsIsEntityName(node.expression);\n    default:\n      return false;\n  }\n}\n\nexport const enum tsParseEntityNameFlags {\n  NONE = 0b00,\n  ALLOW_RESERVED_WORDS = 0b01,\n  LEADING_THIS_AS_IDENTIFIER = 0b10,\n}\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n        if (process.env.BABEL_8_BREAKING) {\n          // Consume as an non-conditional type so that we can recover from this error\n          node.argument = this.tsParseNonConditionalType() as any;\n        } else {\n          node.argument = super.parseExprAtom() as any;\n        }\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.argument = this.tsParseLiteralTypeNode();\n        } else {\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          node.argument = this.parseStringLiteral(this.state.value);\n        }\n      }\n      if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n        node.options = super.parseMaybeAssignAllowIn();\n        this.eat(tt.comma);\n      } else {\n        node.options = null;\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName(\n          tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n            tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n        );\n      }\n      if (this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(flags: tsParseEntityNameFlags): N.TsEntityName {\n      let entity: N.TsEntityName;\n      if (\n        flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS &&\n        this.match(tt._this)\n      ) {\n        if (flags & tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER) {\n          entity = this.parseIdentifier(true);\n        } else {\n          const node = this.startNode<N.ThisExpression>();\n          this.next();\n          entity = this.finishNode(node, \"ThisExpression\");\n        }\n      } else {\n        entity = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n      }\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName(\n        tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n      );\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n          );\n        } else {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n              tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n          );\n        }\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const restStartLoc = this.state.startLoc;\n\n      const rest = this.eat(tt.ellipsis);\n      const { startLoc } = this.state;\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAt<N.TsOptionalType>(startLoc);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(restStartLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsTemplateLiteralType | N.TsLiteralType {\n      if (process.env.BABEL_8_BREAKING) {\n        const startLoc = this.state.startLoc;\n        let curElt = this.parseTemplateElement(false);\n        const quasis = [curElt];\n        if (curElt.tail) {\n          const node = this.startNodeAt<N.TsLiteralType>(startLoc);\n          const literal = this.startNodeAt<N.TemplateLiteral>(startLoc);\n          literal.expressions = [];\n          literal.quasis = quasis;\n          node.literal = this.finishNode(literal, \"TemplateLiteral\");\n          return this.finishNode(node, \"TSLiteralType\");\n        } else {\n          const substitutions: N.TsType[] = [];\n          while (!curElt.tail) {\n            substitutions.push(this.tsParseType());\n            this.readTemplateContinuation();\n            quasis.push((curElt = this.parseTemplateElement(false)));\n          }\n          const node = this.startNodeAt<N.TsTemplateLiteralType>(startLoc);\n          node.types = substitutions;\n          node.quasis = quasis;\n          return this.finishNode(node, \"TSTemplateLiteralType\");\n        }\n      } else {\n        const node = this.startNode<N.TsLiteralType>();\n        node.literal = super.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (\n              !(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)\n            ) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      const { startLoc } = this.state;\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAt<N.TsArrayType>(startLoc);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAt<N.TsIndexedAccessType>(startLoc);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          if (process.env.BABEL_8_BREAKING) {\n            const expression = super.parseExprSubscripts();\n            if (!tsIsEntityName(expression)) {\n              this.raise(\n                TSErrors.InvalidHeritageClauseType,\n                expression.loc.start,\n                { token },\n              );\n            }\n            const nodeType =\n              token === \"extends\" ? \"TSInterfaceHeritage\" : \"TSClassImplements\";\n            if (expression.type === \"TSInstantiationExpression\") {\n              // @ts-expect-error cast TSInstantiationExpression to TSInterfaceHeritage/TSClassImplements\n              expression.type = nodeType;\n              return expression;\n            }\n            const node = this.startNodeAtNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >(expression);\n            node.expression = expression;\n            // The last element can not form a TSInstantiationExpression because of the bail condition in\n            // `parseSubscript`, in this case we have to parse type arguments again\n            if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n              node.typeArguments = this.tsParseTypeArgumentsInExpression();\n            }\n            return this.finishNode(node, nodeType);\n          } else {\n            const node = this.startNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >();\n            // @ts-expect-error Babel 7 vs Babel 8\n            node.expression = this.tsParseEntityName(\n              tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n                tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n            );\n            if (this.match(tt.lt)) {\n              // @ts-expect-error Babel 7 vs Babel 8\n              node.typeParameters = this.tsParseTypeArguments();\n            }\n\n            return this.finishNode(\n              node,\n              // @ts-expect-error Babel 7 vs Babel 8\n              \"TSExpressionWithTypeArguments\",\n            );\n          }\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    tsInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      if (process.env.BABEL_8_BREAKING) {\n        node.body = this.tsParseEnumBody();\n      } else {\n        this.expect(tt.braceL);\n        node.members = this.tsParseDelimitedList(\n          \"EnumMembers\",\n          this.tsParseEnumMember.bind(this),\n        );\n        this.expect(tt.braceR);\n      }\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseEnumBody(): N.TsEnumBody {\n      const node = this.startNode<N.TsEnumBody>();\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumBody\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = process.env.BABEL_8_BREAKING\n        ? this.tsParseEntityName(tsParseEntityNameFlags.ALLOW_RESERVED_WORDS)\n        : this.parseIdentifier();\n\n      if (\n        process.env.BABEL_8_BREAKING ? node.id.type === \"Identifier\" : !nested\n      ) {\n        // @ts-expect-error checked above\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (!process.env.BABEL_8_BREAKING && this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.kind = \"global\";\n        if (!process.env.BABEL_8_BREAKING) {\n          node.global = true;\n        }\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.kind = \"module\";\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      if (!process.env.BABEL_8_BREAKING) {\n        node.isExport = isExport || false;\n      }\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(tsParseEntityNameFlags.NONE);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any) {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany as Undone<N.ClassDeclaration>,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.kind = \"global\";\n            if (!process.env.BABEL_8_BREAKING) {\n              node.global = true;\n            }\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ) {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              node.kind = \"module\";\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            node.kind = \"namespace\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        this.tsInTopLevelContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseBindingElement(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            if (process.env.BABEL_8_BREAKING) {\n              result.typeArguments = typeArguments;\n            } else {\n              result.typeParameters = typeArguments;\n            }\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(tt.parenR);\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            if (process.env.BABEL_8_BREAKING) {\n              node.typeArguments = typeArguments;\n            } else {\n              node.typeParameters = typeArguments;\n            }\n\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              this.state.startLoc,\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = callee.typeArguments;\n        } else {\n          node.typeParameters = callee.typeParameters;\n        }\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        const nodeImportEquals = process.env.BABEL_8_BREAKING\n          ? this.startNode<N.TsImportEqualsDeclaration>()\n          : (node as Undone<N.TsImportEqualsDeclaration>);\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        const declaration = this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n        if (process.env.BABEL_8_BREAKING) {\n          (node as Undone<N.ExportNamedDeclaration>).declaration = declaration;\n          (node as Undone<N.ExportNamedDeclaration>).specifiers = [];\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        } else {\n          return declaration;\n        }\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare && declaration.type !== \"TSImportEqualsDeclaration\") {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        !Object.hasOwn(\n          (node as unknown as N.EstreeMethodDefinition).value,\n          \"body\",\n        )\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments = this.tsParseTypeArgumentsInExpression();\n        } else {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(\n      expr: N.Expression,\n      startLoc: Position,\n    ): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n            startLoc,\n          ) as N.CallExpression;\n          if (process.env.BABEL_8_BREAKING) {\n            call.typeArguments = typeArguments;\n          } else {\n            call.typeParameters = typeArguments;\n          }\n\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr, startLoc);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableListItem(\n      exprList: (N.Expression | N.SpreadElement | N.RestElement)[],\n      index: number,\n      isLHS: boolean,\n    ): void {\n      const node = exprList[index];\n      if (node.type === \"TSTypeCastExpression\") {\n        exprList[index] = this.typeCastToParameter(node);\n      }\n      super.toAssignableListItem(exprList, index, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) {\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n        }\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasEstreePlugin = this.hasPlugin(\"estree\");\n        const methodFn = hasEstreePlugin\n          ? // @ts-expect-error estree typings\n            method.value\n          : method;\n        if (methodFn.body) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n", "import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (\n        this.state.start >\n        this.offsetToSourcePos(this.state.lastTokEndLoc.index)\n      ) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n", "import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n", "import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = process.env.BABEL_8_BREAKING\n      ? pluginsMap.has(\"recordAndTuple\")\n      : pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n        );\n      }\n    } else if (\n      !process.env.BABEL_8_BREAKING &&\n      proposal === \"smart\" &&\n      tupleSyntaxIsHash\n    ) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please migrate to import attributes instead.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"deprecatedImportAssert\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use import attributes instead.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and deprecatedImportAssert plugins.\",\n      );\n    }\n  }\n  if (\n    !pluginsMap.has(\"deprecatedImportAssert\") &&\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax\n  ) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'importAttributes' plugin has been removed in Babel 8. If you need to enable support \" +\n          \"for the deprecated `assert` syntax, you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n    if (syntaxType != null) {\n      if (process.env.BABEL_8_BREAKING) {\n        if (syntaxType === \"hash\") {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. You can safely remove { syntaxType: \"hash\" } from the recordAndTuple config.',\n          );\n        } else {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. Please remove { syntaxType: \"bar\" } from the recordAndTuple config and migrate to the hash syntax #{} and #[].',\n          );\n        }\n      } else {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n", "// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport { cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport { OptionFlags, type SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    sawProto: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): boolean {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return sawProto;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return true;\n      }\n      if (sawProto) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      return true;\n    }\n\n    return sawProto;\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" &&\n      this.offsetToSourcePos(expr.start) === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.optionFlags & OptionFlags.Tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(refExpressionErrors: ExpressionErrors) {\n    refExpressionErrors.optionalParametersLoc = this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isYield = this.isContextual(tt._yield);\n    if (isYield) {\n      if (this.prodParam.hasYield) {\n        this.next();\n        let left = this.parseYield(startLoc);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (isYield) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);\n        return this.parseYield(startLoc);\n      }\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          op === tt.pipeline &&\n          // @ts-expect-error: Only in Babel 7\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          // @ts-expect-error: Babel 7 only\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n        ) {\n          return this.withTopicBindingContext(() => {\n            if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n              throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n            }\n            return this.parseSmartPipelineBodyInStyle(\n              this.parseExprOpBaseRightExpr(op, prec),\n              startLoc,\n            );\n          });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      this.offsetToSourcePos(base.start) === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: Undone<N.Node> | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.optionFlags & OptionFlags.CreateImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n          return this.parseDecimalLiteral(this.state.value);\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      if (process.env.BABEL_8_BREAKING || pipeProposal === \"hack\") {\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PipeTopicUnbound, startLoc);\n        }\n\n        // Register the topic reference so that its pipe body knows\n        // that its topic was used at least once.\n        this.registerTopicReference();\n\n        return this.finishNode(node, \"TopicReference\");\n      } else {\n        // pipeProposal is \"smart\"\n\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PrimaryTopicNotAllowed, startLoc);\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n      }\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\"(Babel 7) or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!(this.optionFlags & OptionFlags.CreateImportExpressions)) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !(this.optionFlags & OptionFlags.AllowNewTargetOutsideFunction)\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    let sawProto = false;\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        sawProto = this.checkProto(\n          prop,\n          isRecord,\n          sawProto,\n          refExpressionErrors,\n        );\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: Undone<N.Node>): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns wether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed =\n      this.prodParam.hasAwait ||\n      (this.optionFlags & OptionFlags.AllowAwaitOutsideFunction &&\n        !this.scope.inFunction);\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (\n      !this.scope.inFunction &&\n      !(this.optionFlags & OptionFlags.AllowAwaitOutsideFunction)\n    ) {\n      if (this.isAmbiguousPrefixOrIdentifier()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousPrefixOrIdentifier(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser, startLoc: Position): N.YieldExpression {\n    const node = this.startNodeAt<N.YieldExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      node,\n    );\n\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(tt.comma)) {\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n\n        if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n          // keep consuming arguments, to then throw ImportCallArity\n          // instead of \"expected )\"\n          do {\n            this.parseMaybeAssignAllowIn();\n          } while (this.eat(tt.comma) && !this.match(tt.parenR));\n\n          this.raise(Errors.ImportCallArity, node);\n        }\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // TODO(Babel 8): Remove this method\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      // @ts-expect-error Babel 7 only\n      this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])\n    ) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\"(Babel 7), \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n", "import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport { OptionFlags, type SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(\n  tokens: (Token | N.Comment)[],\n  input: string,\n  startIndex: number,\n) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.optionFlags & OptionFlags.Tokens) {\n      file.tokens = babel7CompatTokens(\n        this.tokens,\n        this.input,\n        this.startIndex,\n      );\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !(this.optionFlags & OptionFlags.AllowUndeclaredExports) &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(\n      this.offsetToSourcePos(directiveLiteral.start),\n      this.offsetToSourcePos(directiveLiteral.end),\n    );\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (\n          !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n          !topLevel\n        ) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportNamedDeclaration\n            >,\n            decorators,\n          );\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (\n      !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n      !this.inModule\n    ) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators?.length) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n  ): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAt<N.CallExpression>(startLoc);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (\n      !this.prodParam.hasReturn &&\n      !(this.optionFlags & OptionFlags.AllowReturnOutsideFunction)\n    ) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start),\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      this.sawUnambiguousESM = true;\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node2.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      } else {\n        node2.attributes = [];\n      }\n      node2.declaration = null;\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      } else {\n        node.attributes = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n        this.addExtra(node, \"deprecatedWithLegacySyntax\", true);\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (\n        !this.hasPlugin(\"deprecatedImportAssert\") &&\n        (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\"))\n      ) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions, OptionFlags } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n\n    let optionFlags = 0;\n    if (options.allowAwaitOutsideFunction) {\n      optionFlags |= OptionFlags.AllowAwaitOutsideFunction;\n    }\n    if (options.allowReturnOutsideFunction) {\n      optionFlags |= OptionFlags.AllowReturnOutsideFunction;\n    }\n    if (options.allowImportExportEverywhere) {\n      optionFlags |= OptionFlags.AllowImportExportEverywhere;\n    }\n    if (options.allowSuperOutsideMethod) {\n      optionFlags |= OptionFlags.AllowSuperOutsideMethod;\n    }\n    if (options.allowUndeclaredExports) {\n      optionFlags |= OptionFlags.AllowUndeclaredExports;\n    }\n    if (options.allowNewTargetOutsideFunction) {\n      optionFlags |= OptionFlags.AllowNewTargetOutsideFunction;\n    }\n    if (options.allowYieldOutsideFunction) {\n      optionFlags |= OptionFlags.AllowYieldOutsideFunction;\n    }\n    if (options.ranges) {\n      optionFlags |= OptionFlags.Ranges;\n    }\n    if (options.tokens) {\n      optionFlags |= OptionFlags.Tokens;\n    }\n    if (options.createImportExpressions) {\n      optionFlags |= OptionFlags.CreateImportExpressions;\n    }\n    if (options.createParenthesizedExpressions) {\n      optionFlags |= OptionFlags.CreateParenthesizedExpressions;\n    }\n    if (options.errorRecovery) {\n      optionFlags |= OptionFlags.ErrorRecovery;\n    }\n    if (options.attachComment) {\n      optionFlags |= OptionFlags.AttachComment;\n    }\n    if (options.annexB) {\n      optionFlags |= OptionFlags.AnnexB;\n    }\n\n    this.optionFlags = optionFlags;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n", "import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nexport type {\n  PluginConfig as ParserPlugin,\n  DecoratorsPluginOptions,\n  FlowPluginOptions,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n  TypeScriptPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\nexport type { Token } from \"./tokenizer/index.ts\";\n\n// TODO: Rather than type-casting the internal AST definitions to the\n// @babel/types one, we should actually unify them.\nimport type { Expression, File } from \"@babel/types\";\nexport type { Expression, File };\n\nexport type ParserOptions = Partial<Options>;\n\nexport interface ParseError {\n  code: string;\n  reasonCode: string;\n}\nexport type ParseResult<Result extends File | Expression = File> = Result & {\n  errors: null | ParseError[];\n};\n\n/**\n * Parse the provided code as an entire ECMAScript program.\n */\nexport function parse(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<File> {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast as unknown as ParseResult<File>;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(\n            options,\n            input,\n          ).parse() as unknown as ParseResult<File>;\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast as unknown as ParseResult<File>;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(\n          options,\n          input,\n        ).parse() as unknown as ParseResult<File>;\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse() as unknown as ParseResult<File>;\n  }\n}\n\nexport function parseExpression(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<Expression> {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression() as unknown as ParseResult<Expression>;\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/Thy/Particle-Graph/worker/.wrangler/tmp/bundle-GuI2Dq/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/Thy/Particle-Graph/worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/Thy/Particle-Graph/worker/.wrangler/tmp/bundle-GuI2Dq/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/Thy/Particle-Graph/worker/.wrangler/tmp/bundle-GuI2Dq/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/Thy/Particle-Graph/worker/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/Thy/Particle-Graph/worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/Thy/Particle-Graph/worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/Thy/Particle-Graph/worker/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { createGraph, loadGraph } from \"./api/graph.js\";\nimport { particleThis } from \"./api/particle.js\"; // Even if not used yet\nimport { verifyToken } from \"./api/auth.js\";\n\nexport default {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n    const corsHeaders = {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n    };\n\n    if (request.method === \"OPTIONS\") {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    const token = request.headers.get(\"Authorization\")?.replace(\"Bearer \", \"\");\n    console.log(\"Token received:\", token);\n    const kvValue = await env.KV.get(`token:${token}`);\n    console.log(\"KV value for token:\", kvValue);\n    if (!token || !(await verifyToken(token, env))) {\n      return new Response(\"Unauthorized\", { status: 401, headers: corsHeaders });\n    }\n    console.log(\"Token verified, proceeding...\");\n\n    if (url.pathname === \"/createGraph\" && request.method === \"POST\") {\n      return await createGraph(request, env.R2, corsHeaders);\n    }\n    if (url.pathname === \"/listGraph\" && request.method === \"GET\") {\n      return new Response(\"Graph list TBD\", { headers: corsHeaders });\n    }\n    if (url.pathname === \"/loadGraph\" && request.method === \"GET\") {\n      return await loadGraph(request, env.R2, corsHeaders);\n    }\n    if (url.pathname === \"/exportGraph\" && request.method === \"GET\") {\n      return new Response(\"Graph export TBD\", { headers: corsHeaders });\n    }\n    if (url.pathname === \"/updateGraph\" && request.method === \"POST\") {\n      return new Response(\"Graph update TBD\", { headers: corsHeaders });\n    }\n    if (url.pathname === \"/particleThis\" && request.method === \"POST\") {\n      return new Response(\"Particle refinement TBD\", { headers: corsHeaders });\n    }\n    if (url.pathname === \"/getLibraryDefs\" && request.method === \"GET\") {\n      return new Response(\"Library defs TBD\", { headers: corsHeaders });\n    }\n    if (url.pathname === \"/showParticles\" && request.method === \"GET\") {\n      return new Response(\"Particles show TBD\", { headers: corsHeaders });\n    }\n    if (url.pathname === \"/appStory\" && request.method === \"GET\") {\n      return new Response(\"App story TBD\", { headers: corsHeaders });\n    }\n\n    if (url.pathname === \"/mcp\" && request.method === \"POST\") {\n      const jsonRpc = await request.json();\n      switch (jsonRpc.method) {\n        case \"create_graph\":\n          return new Response(JSON.stringify({ jsonrpc: \"2.0\", result: \"TBD\", id: jsonRpc.id }), { headers: corsHeaders });\n        case \"list_graphs\":\n          return new Response(JSON.stringify({ jsonrpc: \"2.0\", result: \"TBD\", id: jsonRpc.id }), { headers: corsHeaders });\n        case \"load_graph\":\n          return new Response(JSON.stringify({ jsonrpc: \"2.0\", result: \"TBD\", id: jsonRpc.id }), { headers: corsHeaders });\n        // ... rest of MCP cases unchanged ...\n      }\n    }\n\n    return new Response(\"Not found\", { status: 404, headers: corsHeaders });\n  },\n};", "import { parseCode } from \"../utils/parser.js\";\nimport { encrypt, decrypt } from \"../utils/crypto.js\";\n\nexport async function createGraph(request, r2, headers) {\n  return new Response(\"Graph creation TBD\", { headers });\n}\n\nexport async function loadGraph(request, r2, headers) {\n  return new Response(\"Graph load TBD\", { headers });\n}", "import { parse } from \"@babel/parser\";\nimport axios from \"axios\";\n\nexport async function parseCode({ filePath, projectId, token, env }) {\n  // Fetch code from GitHub\n  const response = await axios.get(\n    `https://api.github.com/repos/${projectId}/contents/${filePath}`,\n    { headers: { Authorization: `Bearer ${token}` } }\n  );\n  const code = atob(response.data.content);\n\n  // Determine file type and plugins\n  const hasTypeScriptSyntax =\n    code.includes(\": \") ||\n    code.includes(\"<T>\") ||\n    code.includes(\"interface \") ||\n    code.includes(\"type \") ||\n    filePath.endsWith(\".ts\") ||\n    filePath.endsWith(\".tsx\");\n  const plugins = [\"jsx\", \"decorators-legacy\", hasTypeScriptSyntax ? \"typescript\" : \"flow\"];\n  const ast = parse(code, {\n    sourceType: \"module\",\n    plugins,\n    tokens: true,\n    comments: true,\n  });\n\n  // Initialize particle (full structure from old code)\n  const fileExt = filePath.split(\".\").pop();\n  let particle = {\n    path: filePath,\n    type: fileExt === \"jsx\" || fileExt === \"tsx\" ? \"component\" : \"file\",\n    purpose: `Handles ${filePath.split(\"/\").pop().replace(/\\.[^/.]+$/, \"\").toLowerCase()} functionality`,\n    props: [],\n    hooks: [],\n    calls: [],\n    logic: [],\n    depends_on: [],\n    jsx: [],\n    state_machine: null,\n    routes: [],\n    comments: [],\n    used_by: [], // Placeholder for future dependency tracking\n  };\n\n  // Extract comments\n  if (ast.comments && ast.comments.length > 0) {\n    ast.comments.forEach((comment) => {\n      const text = comment.value.trim().replace(/^\\*+\\s*/gm, \"\").replace(/\\n\\s*\\*\\s*/g, \"\\n\");\n      if (text.toLowerCase().includes(\"todo\") || text.toLowerCase().includes(\"fixme\")) {\n        particle.comments.push({ type: \"todo\", text, line: comment.loc.start.line });\n      } else if (comment.type === \"CommentBlock\" && comment.loc.start.line <= 20) {\n        particle.comments.push({ type: \"doc\", text, line: comment.loc.start.line });\n        if (text.includes(\"component\") || text.includes(\"Component\")) {\n          particle.purpose = text.split(\"\\n\")[0].trim();\n        }\n      }\n    });\n  }\n\n  // Walk AST (full logic from old code)\n  function walk(node) {\n    if (!node) return;\n\n    // Props (top-level functions)\n    if ((node.type === \"FunctionDeclaration\" || node.type === \"ArrowFunctionExpression\") && node.loc?.start.line <= 10) {\n      node.params.forEach((param) => {\n        if (param.type === \"ObjectPattern\") {\n          particle.props = param.properties.map((p) => ({\n            name: p.key.name,\n            default: p.value?.type === \"AssignmentPattern\" ? p.value.right.value ?? p.value.right.name ?? null : null,\n            required: p.value?.type !== \"AssignmentPattern\",\n          }));\n        } else if (param.type === \"Identifier\") {\n          particle.props = [{ name: param.name, default: null, required: true }];\n        }\n      });\n    }\n\n    // Hooks\n    if (node.type === \"CallExpression\") {\n      const callee = node.callee.name || (node.callee.property && `${node.callee.object?.name}.${node.callee.property.name}`);\n      if (callee?.startsWith(\"use\")) {\n        const args = node.arguments\n          .map((arg) => {\n            if (arg.type === \"StringLiteral\" || arg.type === \"NumericLiteral\") return arg.value;\n            if (arg.type === \"Identifier\") return arg.name;\n            if (arg.type === \"ObjectExpression\") return \"{...}\";\n            if (arg.type === \"ArrayExpression\") return \"[...]\";\n            return null;\n          })\n          .filter(Boolean);\n        particle.hooks.push({\n          name: callee,\n          args: args.length > 0 ? args : null,\n          line: node.loc.start.line,\n        });\n      }\n\n      // API calls\n      if (callee === \"fetch\" || node.callee.object?.name === \"axios\" || node.callee.object?.name === \"supabase\") {\n        const args = node.arguments.map((arg) => (arg.type === \"StringLiteral\" ? arg.value : null)).filter(Boolean);\n        particle.calls.push({\n          name: callee,\n          args: args.length > 0 ? args : null,\n          line: node.loc.start.line,\n        });\n      }\n    }\n\n    // Depends On (imports)\n    if (node.type === \"ImportDeclaration\") {\n      const source = node.source.value;\n      const specifiers = node.specifiers\n        .map((spec) => {\n          if (spec.type === \"ImportDefaultSpecifier\") return spec.local.name;\n          if (spec.type === \"ImportSpecifier\") return spec.imported.name;\n          return null;\n        })\n        .filter(Boolean);\n      particle.depends_on.push({\n        source,\n        specifiers: specifiers.length > 0 ? specifiers : null,\n      });\n    }\n\n    for (const key in node) if (node[key] && typeof node[key] === \"object\") walk(node[key]);\n  }\n\n  // Enhance Walk (full logic from old code)\n  function enhanceWalk(node) {\n    if (!node) return;\n\n    // Rich Props (from hooks)\n    if (node.type === \"VariableDeclarator\" && node.init?.callee?.name?.startsWith(\"use\")) {\n      if (node.id?.type === \"ObjectPattern\") {\n        node.id.properties.forEach((p) => {\n          const existing = particle.props.find((prop) => prop.name === p.key.name);\n          if (!existing) {\n            particle.props.push({\n              name: p.key.name,\n              default: null,\n              required: true,\n              source: node.init.callee.name,\n            });\n          }\n        });\n      } else if (node.id?.type === \"ArrayPattern\") {\n        node.id.elements.forEach((element, index) => {\n          if (element?.name) {\n            const hookName = node.init.callee.name;\n            const existing = particle.props.find((prop) => prop.name === element.name);\n            if (!existing) {\n              particle.props.push({\n                name: element.name,\n                default: null,\n                required: true,\n                source: hookName,\n                type: index === 1 ? \"setter\" : \"state\",\n              });\n            }\n          }\n        });\n      }\n    }\n\n    // Routes (navigation and definitions)\n    if (node.type === \"CallExpression\") {\n      const callee = node.callee.name || (node.callee.property && `${node.callee.object?.name}.${node.callee.property.name}`);\n      if (callee && [\"router.push\", \"router.replace\", \"navigate\", \"navigateToTab\"].includes(callee)) {\n        const arg = node.arguments[0];\n        let route = null;\n        if (arg?.type === \"StringLiteral\") route = arg.value;\n        else if (arg?.type === \"TemplateLiteral\" && arg.quasis.length > 0) route = arg.quasis[0].value.raw;\n        if (route && !particle.routes.find((r) => r.path === route)) {\n          particle.routes.push({ path: route, type: \"navigation\", line: node.loc.start.line });\n        }\n      }\n    }\n\n    if (\n      node.type === \"ObjectExpression\" &&\n      node.properties?.some((p) => p.key?.name === \"path\" || p.key?.name === \"element\")\n    ) {\n      const pathProp = node.properties.find((p) => p.key?.name === \"path\");\n      const elementProp = node.properties.find((p) => p.key?.name === \"element\");\n      const componentProp = node.properties.find((p) => p.key?.name === \"component\");\n      if (pathProp?.value?.type === \"StringLiteral\") {\n        const path = pathProp.value.value;\n        let component = null;\n        if (elementProp?.value?.type === \"JSXElement\") component = elementProp.value.openingElement.name.name;\n        else if (componentProp?.value?.type === \"Identifier\") component = componentProp.value.name;\n        if (!particle.routes.find((r) => r.path === path)) {\n          particle.routes.push({ path, component, type: \"definition\", line: node.loc.start.line });\n        }\n      }\n    }\n\n    // JSX Elements\n    if (node.type === \"JSXElement\") {\n      const tag = node.openingElement?.name?.name;\n      if (tag) {\n        const attrs = {};\n        node.openingElement.attributes?.forEach((attr) => {\n          if (attr.type === \"JSXAttribute\") {\n            const name = attr.name.name;\n            let value = null;\n            if (attr.value?.type === \"StringLiteral\") value = attr.value.value;\n            else if (attr.value?.type === \"JSXExpressionContainer\") {\n              if (attr.value.expression?.type === \"Identifier\") value = attr.value.expression.name;\n              else if (attr.value.expression?.type === \"ArrowFunctionExpression\") value = \"function\";\n            }\n            if (name.startsWith(\"on\")) {\n              attrs.events = attrs.events || [];\n              attrs.events.push(name);\n            } else {\n              attrs.props = attrs.props || [];\n              attrs.props.push({ name, value });\n            }\n          }\n        });\n        particle.jsx.push({ tag, ...attrs, line: node.loc.start.line });\n      }\n    }\n\n    // Logic (conditions)\n    if (node.type === \"IfStatement\") {\n      const test = node.test;\n      let condition = \"\";\n      if (test?.type === \"Identifier\") condition = test.name;\n      else if (test?.type === \"BinaryExpression\") {\n        const left = test.left?.property ? `${test.left.object?.name}.${test.left.property.name}` : test.left?.name || test.left?.value;\n        const right = test.right?.property ? `${test.right.object?.name}.${test.right.property.name}` : test.right?.name || test.right?.value;\n        condition = `${left || \"unknown\"} ${test.operator} ${right || \"unknown\"}`;\n      }\n      if (condition && !condition.includes(\"unknown\")) {\n        let action = \"handles condition\";\n        if (node.consequent.type === \"BlockStatement\") {\n          node.consequent.body.forEach((stmt) => {\n            if (stmt.type === \"ReturnStatement\" && stmt.argument?.type === \"JSXElement\") {\n              action = `renders ${stmt.argument.openingElement.name.name}`;\n            } else if (\n              stmt.type === \"ExpressionStatement\" &&\n              (stmt.expression?.callee?.name === \"router.push\" || stmt.expression?.callee?.name === \"navigate\")\n            ) {\n              action = `navigates to ${stmt.expression.arguments[0]?.value || \"route\"}`;\n            }\n          });\n        }\n        particle.logic.push({ condition, action, line: node.loc.start.line });\n      }\n    }\n\n    // State Machines\n    if (node.type === \"VariableDeclarator\" && (node.id.name?.endsWith(\"_STATES\") || node.id.name?.endsWith(\"States\"))) {\n      let states = [];\n      if (node.init?.type === \"ObjectExpression\") {\n        states = node.init.properties?.map((prop) => ({\n          name: prop.key.name || prop.key.value,\n          value: prop.value?.value,\n        })) || [];\n      }\n      if (states.length > 0) {\n        particle.state_machine = { name: node.id.name, states, line: node.loc.start.line };\n      }\n    } else if (node.type === \"CallExpression\" && (node.callee?.name === \"useReducer\" || node.callee?.name === \"createReducer\")) {\n      const reducerArg = node.arguments[0];\n      if (reducerArg?.type === \"Identifier\") {\n        particle.state_machine = { name: `${reducerArg.name} (reducer)`, type: \"reducer\", line: node.loc.start.line };\n      }\n    }\n\n    for (const key in node) if (node[key] && typeof node[key] === \"object\") enhanceWalk(node[key]);\n  }\n\n  walk(ast);\n  enhanceWalk(ast);\n\n  // Filter empty fields (as in old code)\n  Object.keys(particle).forEach((key) => {\n    if (Array.isArray(particle[key]) && particle[key].length === 0) delete particle[key];\n    if (key === \"state_machine\" && (!particle[key] || (particle[key].states && particle[key].states.length === 0))) delete particle[key];\n  });\n\n  return { ast, particle };\n}", "// Placeholder; replace with real AES-256 via Web Crypto API\nexport function encrypt(data, key) {\n    return Buffer.from(data).toString(\"base64\"); // Temporary\n  }\n  export function decrypt(data, key) {\n    return Buffer.from(data, \"base64\").toString(); // Temporary\n  }", "import { parseCode } from \"../utils/parser.js\";\nimport { encrypt, decrypt } from \"../utils/crypto.js\";\n\nexport async function particleThis(request, r2, headers) {\n  const url = typeof request === \"string\" ? new URL(request) : new URL(request.url);\n  const token = request.token || request.headers.get(\"Authorization\");\n  const projectId = url.searchParams.get(\"projectId\") || request.projectId;\n  const filePath = url.searchParams.get(\"filePath\") || request.filePath;\n  const input = url.searchParams.get(\"input\") || request.input;\n\n  let particle;\n  const existing = await r2.get(`particles/${projectId}/${filePath}.json`);\n  if (!existing) {\n    const { particle: parsedParticle } = await parseCode({ filePath, projectId, token, env: request.env });\n    particle = parsedParticle;\n    await r2.put(`particles/${projectId}/${filePath}.json`, encrypt(JSON.stringify(particle), token));\n  } else {\n    particle = JSON.parse(decrypt(await existing.text(), token));\n  }\n\n  // Refine with xAI (placeholder)\n  const refined = { ...particle, refinedBy: \"xAI\", input };\n  await r2.put(`superParticles/${projectId}/${filePath}.json`, encrypt(JSON.stringify(refined), token));\n  return refined;\n}", "export async function verifyToken(token, env) {\n    const valid = await env.KV.get(`token:${token}`);\n    return valid === \"valid\";\n  }\n  \n  export async function registerToken(token, env) {\n    await env.KV.put(`token:${token}`, \"valid\", { expirationTtl: 3600 }); // 1 hour\n    return true;\n  }", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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AE,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,IAAG,MAAK,GAAE,KAAI,MAAK,IAAG,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GA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",
  "names": ["Position", "constructor", "line", "col", "index", "column", "SourceLocation", "start", "end", "filename", "identifierName", "createPositionWithColumnOffset", "position", "columnOffset", "code", "ModuleErrors", "ImportMetaOutsideModule", "message", "ImportOutsideModule", "NodeDescriptions", "ArrayPattern", "AssignmentExpression", "AssignmentPattern", "ArrowFunctionExpression", "ConditionalExpression", "CatchClause", "ForOfStatement", "ForInStatement", "ForStatement", "FormalParameters", "Identifier", "ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ObjectPattern", "ParenthesizedExpression", "RestElement", "UpdateExpression", "true", "false", "VariableDeclarator", "YieldExpression", "toNodeDescription", "node", "type", "prefix", "StandardErrors", "AccessorIsGenerator", "kind", "ArgumentsInClass", "AsyncFunctionInSingleStatementContext", "AwaitBindingIdentifier", "AwaitBindingIdentifierInStaticBlock", "AwaitExpressionFormalParameter", "AwaitUsingNotInAsyncContext", "AwaitNotInAsyncContext", "BadGetterArity", "BadSetterArity", "BadSetterRestParameter", "ConstructorClassField", "ConstructorClassPrivateField", "ConstructorIsAccessor", "ConstructorIsAsync", "ConstructorIsGenerator", "DeclarationMissingInitializer", "DecoratorArgumentsOutsideParentheses", "DecoratorBeforeExport", "DecoratorsBeforeAfterExport", "DecoratorConstructor", "DecoratorExportClass", "DecoratorSemicolon", "DecoratorStaticBlock", "DeferImportRequiresNamespace", "DeletePrivateField", "DestructureNamedImport", "DuplicateConstructor", "DuplicateDefaultExport", "DuplicateExport", "exportName", "DuplicateProto", "DuplicateRegExpFlags", "DynamicImportPhaseRequiresImportExpressions", "phase", "ElementAfterRest", "EscapedCharNotAnIdentifier", "ExportBindingIsString", "localName", "ExportDefaultFromAsIdentifier", "ForInOfLoopInitializer", "ForInUsing", "ForOfAsync", "ForOfLet", "GeneratorInSingleStatementContext", "IllegalBreakContinue", "IllegalLanguageModeDirective", "IllegalReturn", "ImportAttributesUseAssert", "ImportBindingIsString", "importName", "ImportCallArity", "ImportCallNotNewExpression", "ImportCallSpreadArgument", "ImportJSONBindingNotDefault", "ImportReflectionHasAssertion", "ImportReflectionNotBinding", "IncompatibleRegExpUVFlags", "InvalidBigIntLiteral", "InvalidCodePoint", "InvalidCoverInitializedName", "InvalidDecimal", "InvalidDigit", "radix", "InvalidEscapeSequence", "InvalidEscapeSequenceTemplate", "InvalidEscapedReservedWord", "reservedWord", "InvalidIdentifier", "InvalidLhs", "ancestor", "InvalidLhsBinding", "InvalidLhsOptionalChaining", "InvalidNumber", "InvalidOrMissingExponent", "InvalidOrUnexpectedToken", "unexpected", "InvalidParenthesizedAssignment", "InvalidPrivateFieldResolution", "InvalidPropertyBindingPattern", "InvalidRecordProperty", "InvalidRestAssignmentPattern", "LabelRedeclaration", "labelName", "LetInLexicalBinding", "LineTerminatorBeforeArrow", "MalformedRegExpFlags", "MissingClassName", "MissingEqInAssignment", "MissingSemicolon", "MissingPlugin", "missingPlugin", "map", "name", "JSON", "stringify", "join", "MissingOneOfPlugins", "MissingUnicodeEscape", "MixingCoalesceWithLogical", "ModuleAttributeDifferentFromType", "ModuleAttributeInvalidValue", "ModuleAttributesWithDuplicateKeys", "key", "ModuleExportNameHasLoneSurrogate", "surrogateCharCode", "toString", "ModuleExportUndefined", "MultipleDefaultsInSwitch", "NewlineAfterThrow", "NoCatchOrFinally", "NumberIdentifier", "NumericSeparatorInEscapeSequence", "ObsoleteAwaitStar", "OptionalChainingNoNew", "OptionalChainingNoTemplate", "OverrideOnConstructor", "ParamDupe", "PatternHasAccessor", "PatternHasMethod", "PrivateInExpectedIn", "PrivateNameRedeclaration", "RecordExpressionBarIncorrectEndSyntaxType", "RecordExpressionBarIncorrectStartSyntaxType", "RecordExpressionHashIncorrectStartSyntaxType", "RecordNoProto", "RestTrailingComma", "SloppyFunction", "SloppyFunctionAnnexB", "SourcePhaseImportRequiresDefault", "StaticPrototype", "SuperNotAllowed", "SuperPrivateField", "TrailingDecorator", "TupleExpressionBarIncorrectEndSyntaxType", "TupleExpressionBarIncorrectStartSyntaxType", "TupleExpressionHashIncorrectStartSyntaxType", "UnexpectedArgumentPlaceholder", "UnexpectedAwaitAfterPipelineBody", "UnexpectedDigitAfterHash", "UnexpectedImportExport", "UnexpectedKeyword", "keyword", "UnexpectedLeadingDecorator", "UnexpectedLexicalDeclaration", "UnexpectedNewTarget", "UnexpectedNumericSeparator", "UnexpectedPrivateField", "UnexpectedReservedWord", "UnexpectedSuper", "UnexpectedToken", "expected", "UnexpectedTokenUnaryExponentiation", "UnexpectedUsingDeclaration", "UnsupportedBind", "UnsupportedDecoratorExport", "UnsupportedDefaultExport", "UnsupportedImport", "UnsupportedMetaProperty", "target", "onlyValidPropertyName", "UnsupportedParameterDecorator", "UnsupportedPropertyDecorator", "UnsupportedSuper", "UnterminatedComment", "UnterminatedRegExp", "UnterminatedString", "UnterminatedTemplate", "UsingDeclarationExport", "UsingDeclarationHasBindingPattern", "VarRedeclaration", "YieldBindingIdentifier", "YieldInParameter", "YieldNotInGeneratorFunction", "ZeroDigitNumericSeparator", "StrictModeErrors", "StrictDelete", "StrictEvalArguments", "referenceName", "StrictEvalArgumentsBinding", "bindingName", "StrictFunction", "StrictNumericEscape", "StrictOctalLiteral", "StrictWith", "UnparenthesizedPipeBodyDescriptions", "Set", "Object", "assign", "PipeBodyIsTighter", "PipeTopicRequiresHackPipes", "PipeTopicUnbound", "PipeTopicUnconfiguredToken", "token", "PipeTopicUnused", "PipeUnparenthesizedBody", "PipelineBodyNoArrow", "PipelineBodySequenceExpression", "PipelineHeadSequenceExpression", "PipelineTopicUnused", "PrimaryTopicNotAllowed", "PrimaryTopicRequiresSmartPipeline", "defineHidden", "obj", "value", "defineProperty", "enumerable", "configurable", "toParseErrorConstructor", "toMessage", "reasonCode", "syntaxPlugin", "hasMissingPlugin", "oldReasonCodes", "AccessorCannotDeclareThisParameter", "AccessorCannotHaveTypeParameters", "ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference", "SetAccessorCannotHaveOptionalParameter", "SetAccessorCannotHaveRestParameter", "SetAccessorCannotHaveReturnType", "loc", "details", "error", "SyntaxError", "pos", "clone", "overrides", "_overrides$loc", "get", "set", "writable", "ParseErrorEnum", "argument", "Array", "isArray", "parseErrorTemplates", "ParseErrorConstructors", "keys", "template", "_ref", "rest", "_objectWithoutPropertiesLoose", "_excluded", "Errors", "PipelineOperatorErrors", "createDefaultOptions", "sourceType", "sourceFilename", "undefined", "startIndex", "startColumn", "startLine", "allowAwaitOutsideFunction", "allowReturnOutsideFunction", "allowNewTargetOutsideFunction", "allowImportExportEverywhere", "allowSuperOutsideMethod", "allowUndeclaredExports", "allowYieldOutsideFunction", "plugins", "strictMode", "ranges", "tokens", "createImportExpressions", "createParenthesizedExpressions", "errorRecovery", "attachComment", "annexB", "getOptions", "opts", "options", "Error", "toUnenumerable", "object", "toESTreeLocation", "estree", "superClass", "ESTreeParserMixin", "parse", "file", "optionFlags", "parseRegExpLiteral", "pattern", "flags", "regex", "RegExp", "_", "estreeParseLiteral", "parseBigIntLiteral", "bigInt", "BigInt", "_unused", "bigint", "String", "parseDecimalLiteral", "decimal", "parseLiteral", "parseStringLiteral", "parseNumericLiteral", "parseNullLiteral", "parseBooleanLiteral", "directiveToStmt", "directive", "expression", "raw", "extra", "expressionValue", "stmt", "rawValue", "initFunction", "isAsync", "checkDeclaration", "isObjectProperty", "getObjectOrClassMethodParams", "method", "params", "isValidDirective", "_stmt$expression$extr", "parenthesized", "parseBlockBody", "allowDirectives", "topLevel", "afterBlockParse", "directiveStatements", "directives", "d", "body", "concat", "parsePrivateName", "getPluginOption", "convertPrivateNameToPrivateIdentifier", "getPrivateNameSV", "id", "isPrivateName", "parseFunctionBody", "allowExpression", "isMethod", "parseMethod", "isGenerator", "isConstructor", "allowDirectSuper", "inClassScope", "funcNode", "startNode", "typeParameters", "resetStartLocationFromNode", "computed", "finishNode", "nameIsConstructor", "parseClassProperty", "args", "propertyNode", "parseClassPrivateProperty", "parseClassAccessorProperty", "accessorPropertyNode", "parseObjectMethod", "prop", "isPattern", "isAccessor", "shorthand", "parseObjectProperty", "startLoc", "refExpressionErrors", "isValidLVal", "isUnparenthesizedInAssign", "binding", "isAssignable", "isBinding", "toAssignable", "isLHS", "classScope", "usePrivateName", "toAssignableObjectExpressionProp", "isLast", "raise", "finishCallExpression", "unfinished", "optional", "callee", "_ref2", "source", "arguments", "attributes", "toReferencedArguments", "parseExport", "decorators", "exportStartLoc", "state", "lastTokStartLoc", "exported", "specifiers", "length", "_declaration$decorato", "declaration", "resetStartLocation", "parseSubscript", "base", "noCalls", "optionalChainMember", "substring", "stop", "chain", "startNodeAtNode", "isOptionalMemberExpression", "hasPropertyAsPrivateName", "isObjectMethod", "finishNodeAt", "endLoc", "resetEndLocation", "lastTokEndLoc", "TokContext", "preserveSpace", "types", "brace", "j_oTag", "j_cTag", "j_expr", "beforeExpr", "startsExpr", "isLoop", "isAssign", "postfix", "ExportedTokenType", "label", "conf", "rightAssociative", "binop", "updateContext", "keywords", "Map", "createKeyword", "createToken", "createBinop", "tokenTypeCounter", "tokenTypes", "tokenLabels", "tokenBinops", "tokenBeforeExprs", "tokenStartsExprs", "tokenPrefixes", "_options$binop", "_options$beforeExpr", "_options$startsExpr", "_options$prefix", "push", "createKeywordLike", "_options$binop2", "_options$beforeExpr2", "_options$startsExpr2", "_options$prefix2", "tt", "bracketL", "bracketHashL", "bracketBarL", "bracketR", "bracketBarR", "braceL", "braceBarL", "braceHashL", "braceR", "braceBarR", "parenL", "parenR", "comma", "semi", "colon", "doubleColon", "dot", "question", "questionDot", "arrow", "ellipsis", "backQuote", "dollarBraceL", "templateTail", "templateNonTail", "at", "hash", "interpreterDirective", "eq", "slashAssign", "xorAssign", "moduloAssign", "incDec", "bang", "tilde", "doubleCaret", "doubleAt", "pipeline", "nullishCoalescing", "logicalOR", "logicalAND", "bitwiseOR", "bitwiseXOR", "bitwiseAND", "equality", "lt", "gt", "relational", "bitShift", "bitShiftL", "bitShiftR", "plusMin", "modulo", "star", "slash", "exponent", "_in", "_instanceof", "_break", "_case", "_catch", "_continue", "_debugger", "_default", "_else", "_finally", "_function", "_if", "_return", "_switch", "_throw", "_try", "_var", "_const", "_with", "_new", "_this", "_super", "_class", "_extends", "_export", "_import", "_null", "_true", "_false", "_typeof", "_void", "_delete", "_do", "_for", "_while", "_as", "_assert", "_async", "_await", "_defer", "_from", "_get", "_let", "_meta", "_of", "_sent", "_set", "_source", "_static", "_using", "_yield", "_asserts", "_checks", "_exports", "_global", "_implements", "_intrinsic", "_infer", "_is", "_mixins", "_proto", "_require", "_satisfies", "_keyof", "_readonly", "_unique", "_abstract", "_declare", "_enum", "_module", "_namespace", "_interface", "_type", "_opaque", "placeholder", "string", "num", "regexp", "privateName", "eof", "jsxName", "jsxText", "jsxTagStart", "jsxTagEnd", "tokenIsIdentifier", "tokenKeywordOrIdentifierIsKeyword", "tokenIsKeywordOrIdentifier", "tokenIsLiteralPropertyName", "tokenComesBeforeExpression", "tokenCanStartExpression", "tokenIsAssignment", "tokenIsFlowInterfaceOrTypeOrOpaque", "tokenIsLoop", "tokenIsKeyword", "tokenIsOperator", "tokenIsPostfix", "tokenIsPrefix", "tokenIsTSTypeOperator", "tokenIsTSDeclarationStart", "tokenLabelName", "tokenOperatorPrecedence", "tokenIsRightAssociative", "tokenIsTemplate", "getExportedToken", "context", "pop", "tc", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "i", "isIdentifierStart", "test", "fromCharCode", "isIdentifierChar", "reservedWords", "strict", "strictBind", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "isIteratorStart", "current", "next", "next2", "reservedWordLikeSet", "canBeReservedWord", "Scope", "names", "firstLexicalName", "ScopeHandler", "parser", "scopeStack", "undefinedExports", "inTopLevel", "currentScope", "inFunction", "currentVarScopeFlags", "allowSuper", "currentThisScopeFlags", "inClass", "inClassAndNotInNonArrowFunction", "inStaticBlock", "ScopeFlag", "inNonArrowFunction", "treatFunctionsAsVar", "treatFunctionsAsVarInScope", "createScope", "enter", "exit", "scope", "declareName", "bindingType", "checkRedeclarationInScope", "maybeExportDefined", "delete", "isRedeclaredInScope", "checkLocalExport", "topLevelScope", "FlowScope", "declareFunctions", "FlowScopeHandler", "add", "BaseParser", "sawUnambiguousESM", "ambiguousScriptDifferentAst", "sourceToOffsetPos", "sourcePos", "offsetToSourcePos", "offsetPos", "hasPlugin", "pluginConfig", "pluginName", "pluginOptions", "actualOptions", "plugin", "_this$plugins$get", "setTrailingComments", "comments", "trailingComments", "unshift", "setLeadingComments", "leadingComments", "setInnerComments", "innerComments", "adjustInnerComments", "elements", "commentWS", "lastElement", "CommentsParser", "addComment", "comment", "commentsLen", "processComment", "commentStack", "commentStackLength", "lastCommentWS", "leadingNode", "nodeStart", "commentEnd", "containingNode", "finalizeComment", "splice", "trailingNode", "commentStart", "input", "charCodeAt", "properties", "members", "finalizeRemainingComments", "resetPreviousNodeTrailingComments", "resetPreviousIdentifierLeadingComments", "takeSurroundingComments", "lineBreak", "lineBreakG", "isNewLine", "hasNewLine", "skipWhiteSpace", "skipWhiteSpaceInLine", "isWhitespace", "State", "curLine", "lineStart", "errors", "potentialArrowAt", "noArrowAt", "noArrowParamsConversionAt", "topicContext", "maxNumOfResolvableTopics", "maxTopicIndex", "labels", "ct", "firstInvalidTemplateEscapePos", "strictErrors", "tokensLength", "v", "init", "maybeInArrowParameters", "inType", "noAnonFunctionType", "hasFlowComment", "isAmbientContext", "inAbstractClass", "inDisallowConditionalTypesContext", "soloAwait", "inFSharpPipelineDirectBody", "canStartJSXElement", "containsEsc", "hasTopLevelAwait", "curPosition", "slice", "isDigit", "forbiddenNumericSeparatorSiblings", "decBinOct", "hex", "isAllowedNumericSeparatorSibling", "bin", "ch", "oct", "dec", "readStringContents", "initialPos", "initialLineStart", "initialCurLine", "out", "firstInvalidLoc", "chunkStart", "unterminated", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "readCodePoint", "fromCodePoint", "strictNumericEscape", "startPos", "match", "exec", "octalStr", "octal", "parseInt", "len", "forceLen", "n", "readInt", "invalidEscapeSequence", "allowNumSeparator", "bailOnError", "forbiddenSiblings", "isAllowedSibling", "invalid", "total", "e", "Infinity", "val", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "unexpectedNumericSeparator", "_isDigit", "invalidDigit", "indexOf", "invalidCodePoint", "buildPosition", "VALID_REGEX_FLAGS", "Token", "Tokenizer", "isLookahead", "errorHandlers_readInt", "errorBuilder", "errorHandlers_readCodePoint", "errorHandlers_readStringContents_string", "recordStrictModeErrors", "errorHandlers_readStringContents_template", "pushToken", "checkKeywordEscapes", "nextToken", "eat", "createLookaheadState", "curContext", "lookahead", "old", "curr", "nextTokenStart", "nextTokenStartSince", "lastIndex", "lookaheadCharCode", "nextTokenInLineStart", "nextTokenInLineStartSince", "lookaheadInLineCharCode", "codePointAtPos", "cp", "trail", "setStrict", "forEach", "toParseError", "clear", "skipSpace", "finishToken", "getTokenFromCode", "skipBlockComment", "skipLineComment", "startSkip", "spaceStart", "loop", "commentWhitespace", "prevType", "replaceToken", "readToken_numberSign", "readToken_interpreter", "nextPos", "expectPlugin", "readWord1", "finishOp", "readToken_dot", "readNumber", "readToken_slash", "readToken_mult_modulo", "width", "readToken_pipe_amp", "readToken_caret", "proposal", "topicToken", "lookaheadCh", "codePointAt", "readToken_atSign", "readToken_plus_min", "readToken_lt", "readToken_gt", "size", "readToken_eq_excl", "readToken_question", "readTemplateToken", "readRadixNumber", "readString", "readWord", "readRegexp", "escaped", "content", "mods", "char", "includes", "isBigInt", "replace", "startsWithDot", "isFloat", "hasExponent", "isOctal", "hasLeadingZero", "integer", "underscorePos", "isDecimal", "parseFloat", "quote", "readTemplateContinuation", "opening", "firstCode", "escStart", "identifierCheck", "esc", "keywordTypes", "raiseOverwrite", "expectOnePlugin", "pluginNames", "some", "ClassScope", "privateNames", "loneAccessors", "undefinedPrivateNames", "ClassScopeHandler", "stack", "oldClassScope", "from", "declarePrivateName", "elementType", "redefined", "accessor", "oldStatic", "newStatic", "oldKind", "newKind", "ExpressionScope", "canBeArrowParameterDeclaration", "isCertainlyParameterDeclaration", "ArrowHeadParsingScope", "declarationErrors", "recordDeclarationError", "ParsingErrorClass", "clearDeclarationError", "iterateErrors", "iterator", "ExpressionScopeHandler", "recordParameterInitializerError", "origin", "recordArrowParameterBindingError", "recordAsyncArrowParametersError", "validateAsPattern", "newParameterDeclarationScope", "newArrowHeadScope", "newAsyncArrowScope", "newExpressionScope", "ProductionParameterHandler", "stacks", "currentFlags", "hasAwait", "hasYield", "hasReturn", "hasIn", "functionFlags", "UtilParser", "addExtra", "isContextual", "isUnparsedContextual", "nameStart", "nameEnd", "nextCh", "isLookaheadContextual", "eatContextual", "expectContextual", "canInsertSemicolon", "hasPrecedingLineBreak", "hasFollowingLineBreak", "isLineTerminator", "semicolon", "allowAsi", "expect", "tryParse", "fn", "oldState", "abortSignal", "failState", "thrown", "aborted", "checkExpressionErrors", "andThrow", "shorthandAssignLoc", "doubleProtoLoc", "privateKeyLoc", "optionalParametersLoc", "hasErrors", "isLiteralPropertyName", "property", "initializeScopes", "oldLabels", "oldExportedIdentifiers", "exportedIdentifiers", "oldInModule", "oldScope", "getScopeHandler", "oldProdParam", "prodParam", "oldExpressionScope", "expressionScope", "enterInitialScopes", "paramFlags", "checkDestructuringPrivate", "ExpressionErrors", "Node", "range", "NodePrototype", "prototype", "__clone", "newNode", "clonePlaceholder", "cloneIdentifier", "cloned", "create", "expectedNode", "cloneStringLiteral", "NodeUtils", "startNodeAt", "locationNode", "reservedTypes", "FlowErrors", "AmbiguousConditionalArrow", "AmbiguousDeclareModuleKind", "AssignReservedType", "reservedType", "DeclareClassElement", "DeclareClassFieldInitializer", "DuplicateDeclareModuleExports", "EnumBooleanMemberNotInitialized", "memberName", "enumName", "EnumDuplicateMemberName", "EnumInconsistentMemberValues", "EnumInvalidExplicitType", "invalidEnumType", "EnumInvalidExplicitTypeUnknownSupplied", "EnumInvalidMemberInitializerPrimaryType", "explicitType", "EnumInvalidMemberInitializerSymbolType", "EnumInvalidMemberInitializerUnknownType", "EnumInvalidMemberName", "suggestion", "EnumNumberMemberNotInitialized", "EnumStringMemberInconsistentlyInitialized", "GetterMayNotHaveThisParam", "ImportReflectionHasImportType", "ImportTypeShorthandOnlyInPureImport", "InexactInsideExact", "InexactInsideNonObject", "InexactVariance", "InvalidNonTypeImportInDeclareModule", "MissingTypeParamDefault", "NestedDeclareModule", "NestedFlowComment", "PatternIsOptional", "SetterMayNotHaveThisParam", "SpreadVariance", "ThisParamAnnotationRequired", "ThisParamBannedInConstructor", "ThisParamMayNotBeOptional", "ThisParamMustBeFirst", "ThisParamNoDefault", "TypeBeforeInitializer", "TypeCastInPattern", "UnexpectedExplicitInexactInObject", "UnexpectedReservedType", "UnexpectedReservedUnderscore", "UnexpectedSpaceBetweenModuloChecks", "UnexpectedSpreadType", "UnexpectedSubtractionOperand", "UnexpectedTokenAfterTypeParameter", "UnexpectedTypeParameterBeforeAsyncArrowFunction", "UnsupportedDeclareExportKind", "unsupportedExportKind", "UnsupportedStatementInDeclareModule", "UnterminatedFlowComment", "isEsModuleType", "bodyElement", "hasTypeImportKind", "importKind", "exportSuggestions", "const", "let", "interface", "partition", "list", "list1", "list2", "FLOW_PRAGMA_REGEX", "flow", "FlowParserMixin", "flowPragma", "shouldParseTypes", "matches", "flowParseTypeInitialiser", "tok", "oldInType", "flowParseType", "flowParsePredicate", "moduloLoc", "parseExpression", "flowParseTypeAndPredicateInitialiser", "predicate", "flowParseDeclareClass", "flowParseInterfaceish", "flowParseDeclareFunction", "parseIdentifier", "typeNode", "typeContainer", "flowParseTypeParameterDeclaration", "tmp", "flowParseFunctionTypeParams", "this", "returnType", "typeAnnotation", "flowParseDeclare", "insideModule", "flowParseDeclareVariable", "flowParseDeclareModuleExports", "flowParseDeclareModule", "flowParseDeclareTypeAlias", "flowParseDeclareOpaqueType", "flowParseDeclareInterface", "flowParseDeclareExportDeclaration", "flowParseTypeAnnotatableIdentifier", "parseExprAtom", "bodyNode", "parseImport", "hasModuleExport", "default", "isLet", "exportKind", "flowParseTypeAnnotation", "finished", "flowParseTypeAlias", "flowParseOpaqueType", "isClass", "flowParseRestrictedIdentifier", "extends", "flowParseInterfaceExtends", "implements", "mixins", "flowParseObjectType", "allowStatic", "allowExact", "allowSpread", "allowProto", "allowInexact", "flowParseQualifiedTypeIdentifier", "flowParseTypeParameterInstantiation", "flowParseInterface", "checkNotUnderscore", "checkReservedType", "liberal", "right", "declare", "supertype", "impltype", "flowParseTypeParameter", "requireDefault", "nodeStartLoc", "variance", "flowParseVariance", "ident", "bound", "defaultRequired", "typeParameter", "flowInTopLevelContext", "cb", "oldContext", "flowParseTypeParameterInstantiationInExpression", "reScan_lt", "oldNoAnonFunctionType", "reScan_lt_gt", "flowParseTypeParameterInstantiationCallOrNew", "flowParseTypeOrImplicitInstantiation", "flowParseInterfaceType", "flowParseObjectPropertyKey", "flowParseObjectTypeIndexer", "isStatic", "static", "flowParseObjectTypeInternalSlot", "flowParseObjectTypeMethodish", "flowParseFunctionTypeParam", "flowParseObjectTypeCallProperty", "valueNode", "callProperties", "indexers", "internalSlots", "endDelim", "exact", "inexact", "protoStartLoc", "inexactStartLoc", "propOrInexact", "flowParseObjectTypeProperty", "flowObjectTypeSemicolon", "isInexactToken", "proto", "flowCheckGetterSetterParams", "paramCount", "node2", "qualification", "flowParseGenericType", "flowParseTypeofType", "flowParsePrimaryType", "flowParseTupleType", "first", "lh", "isThis", "reinterpretTypeAsFunctionTypeParam", "flowIdentToTypeAnnotation", "isGroupedType", "parseLiteralAtNode", "createIdentifier", "flowParsePostfixType", "seenOptionalIndexedAccess", "objectType", "indexType", "flowParsePrefixType", "flowParseAnonFunctionWithoutParens", "param", "flowParseIntersectionType", "flowParseUnionType", "allowPrimitiveOverride", "typeCastToParameter", "allowExpressionBody", "forwardNoArrowParamsConversionAt", "parseFunctionBodyAndFinish", "parseStatementLike", "flowParseEnumDeclaration", "parseExpressionStatement", "expr", "shouldParseExportDeclaration", "isExportDefaultSpecifier", "parseExportDefaultExpression", "parseConditional", "setOptionalParametersError", "originalNoArrowAt", "consequent", "failed", "tryParseConditionalConsequent", "valid", "getArrowLikeExpressions", "alternate", "parseMaybeAssign", "parseMaybeAssignAllowIn", "disallowInvalid", "arrows", "finishArrowValidation", "every", "_node$extra", "toAssignableList", "trailingCommaLoc", "checkParams", "result", "parseParenItem", "typeCastNode", "assertModuleNodeAllowed", "parseExportDeclaration", "declarationNode", "parseExportSpecifiers", "parseExportFrom", "eatExportStar", "maybeParseExportNamespaceSpecifier", "hasNamespace", "parseClassId", "isStatement", "optionalId", "parseClassMember", "classBody", "member", "parseClassMemberFromModifier", "isIterator", "readIterator", "fullWord", "left", "exprList", "toReferencedList", "isParenthesizedExpr", "_expr$extra", "parseArrayLike", "close", "canBePattern", "isTuple", "isParenthesized", "isClassMethod", "isClassProperty", "isNonstaticConstructor", "pushClassMethod", "allowsDirectSuper", "isThisParam", "pushClassPrivateMethod", "parseClassSuper", "superTypeParameters", "implemented", "checkGetterSetterParams", "parsePropertyNamePrefixOperator", "parseObjPropValue", "parseFunctionParamType", "parseMaybeDefault", "checkImportReflection", "module", "parseImportSpecifierLocal", "specifier", "local", "finishImportSpecifier", "isPotentialImportPhase", "isExport", "applyImportPhase", "parseImportSpecifier", "importedIsString", "isInTypeOnlyImport", "isMaybeTypeOnly", "firstIdent", "imported", "specifierTypeKind", "as_ident", "specifierIsTypeImport", "checkReservedWord", "parseBindingAtom", "parseFunctionParams", "parseVarId", "decl", "parseAsyncArrowFromCallExpression", "call", "shouldParseAsyncArrow", "afterLeftParse", "_jsx", "jsx", "currentContext", "_jsx2", "_jsx3", "abort", "_arrowExpression$extr", "arrowExpression", "maybeUnwrapTypeCastExpression", "async", "parseArrow", "shouldParseArrow", "setArrowFunctionParameters", "allowDuplicates", "isArrowFunction", "strictModeChanged", "parseParenAndDistinguishExpression", "canBeArrow", "parseSubscripts", "parseCallExpressionArguments", "parseAsyncArrowWithTypeParameters", "subscriptState", "isLookaheadToken_lt", "typeArguments", "parseNewCallee", "targs", "parseArrowExpression", "parseTopLevel", "program", "fileNode", "skipFlowComment", "hasFlowCommentCompletion", "commentSkip", "shiftToFirstNonWhiteSpace", "ch2", "ch3", "flowEnumErrorBooleanMemberNotInitialized", "flowEnumErrorInvalidMemberInitializer", "enumContext", "flowEnumErrorNumberMemberNotInitialized", "flowEnumErrorStringMemberInconsistentlyInitialized", "flowEnumMemberInit", "endOfInit", "literal", "flowEnumMemberRaw", "flowEnumCheckExplicitTypeMismatch", "expectedType", "flowEnumMembers", "seenNames", "booleanMembers", "numberMembers", "stringMembers", "defaultedMembers", "hasUnknownMembers", "memberNode", "toUpperCase", "flowEnumStringMembers", "initializedMembers", "flowEnumParseExplicitType", "flowEnumBody", "nameLoc", "empty", "boolsLen", "numsLen", "strsLen", "defaultedLen", "jsxParseOpeningElementAfterName", "afterNext", "entities", "__proto__", "quot", "amp", "apos", "nbsp", "iexcl", "cent", "pound", "curren", "yen", "brvbar", "sect", "uml", "copy", "ordf", "laquo", "not", "shy", "reg", "macr", "deg", "plusmn", "sup2", "sup3", "acute", "micro", "para", "middot", "cedil", "sup1", "ordm", "raquo", "frac14", "frac12", "frac34", "iquest", "Agrave", "Aacute", "Acirc", "Atilde", "Auml", "Aring", "AElig", "Ccedil", "Egrave", "Eacute", "Ecirc", "Euml", "Igrave", "Iacute", "Icirc", "Iuml", "ETH", "Ntilde", "Ograve", "Oacute", "Ocirc", "Otilde", "Ouml", "times", "Oslash", "Ugrave", "Uacute", "Ucirc", "Uuml", "Yacute", "THORN", "szlig", "agrave", "aacute", "acirc", "atilde", "auml", "aring", "aelig", "ccedil", "egrave", "eacute", "ecirc", "euml", "igrave", "iacute", "icirc", "iuml", "eth", "ntilde", "ograve", "oacute", "ocirc", "otilde", "ouml", "divide", "oslash", "ugrave", "uacute", "ucirc", "uuml", "yacute", "thorn", "yuml", "OElig", "oelig", "Scaron", "scaron", "Yuml", "fnof", "circ", "Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta", "Iota", "Kappa", "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi", "Rho", "Sigma", "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega", "alpha", "beta", "gamma", "delta", "epsilon", "zeta", "eta", "theta", "iota", "kappa", "lambda", "mu", "nu", "xi", "omicron", "pi", "rho", "sigmaf", "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega", "thetasym", "upsih", "piv", "ensp", "emsp", "thinsp", "zwnj", "zwj", "lrm", "rlm", "ndash", "mdash", "lsquo", "rsquo", "sbquo", "ldquo", "rdquo", "bdquo", "dagger", "Dagger", "bull", "hellip", "permil", "prime", "Prime", "lsaquo", "rsaquo", "oline", "frasl", "euro", "image", "weierp", "real", "trade", "alefsym", "larr", "uarr", "rarr", "darr", "harr", "crarr", "lArr", "uArr", "rArr", "dArr", "hArr", "forall", "part", "exist", "nabla", "isin", "notin", "ni", "prod", "sum", "minus", "lowast", "radic", "infin", "ang", "and", "or", "cap", "cup", "int", "there4", "sim", "cong", "asymp", "ne", "equiv", "le", "ge", "sub", "sup", "nsub", "sube", "supe", "oplus", "otimes", "perp", "sdot", "lceil", "rceil", "lfloor", "rfloor", "lang", "rang", "loz", "spades", "clubs", "hearts", "diams", "JsxErrors", "AttributeIsEmpty", "MissingClosingTagElement", "openingTagName", "MissingClosingTagFragment", "UnexpectedSequenceExpression", "HTMLEntity", "UnsupportedJsxValue", "UnterminatedJsxContent", "UnwrappedAdjacentJSXElements", "isFragment", "getQualifiedJSXName", "namespace", "JSXParserMixin", "jsxReadToken", "jsxReadEntity", "jsxReadNewLine", "normalizeCRLF", "jsxReadString", "codePoint", "count", "desc", "entity", "XHTMLEntities", "jsxReadWord", "jsxParseIdentifier", "jsxParseNamespacedName", "jsxParseElementName", "jsxParseAttributeValue", "setContext", "jsxParseExpressionContainer", "jsxParseEmptyExpression", "jsxParseSpreadChild", "previousContext", "jsxParseAttribute", "jsxParseOpeningElementAt", "selfClosing", "jsxParseClosingElementAt", "jsxParseElementAt", "children", "openingElement", "closingElement", "contents", "openingFragment", "closingFragment", "jsxParseElement", "newContext", "TypeScriptScope", "tsNames", "TypeScriptScopeHandler", "importsStack", "hasImport", "allowShadow", "isConst", "wasConst", "unwrapParenthesizedExpression", "LValParser", "_node$extra3", "last", "_node$extra2", "operator", "arg", "checkToRestConversion", "elt", "toAssignableListItem", "element", "toReferencedListDeep", "parseSpread", "parseRestBinding", "parseBindingList", "ParseBindingListFlags", "parseObjectLike", "closeCharCode", "allowEmpty", "elts", "checkCommaAfterRest", "parseDecorator", "parseBindingElement", "parseBindingRestProperty", "parseBindingProperty", "parsePropertyName", "checkLVal", "checkClashes", "hasParenthesizedAncestor", "_expression$extra", "checkIdentifier", "validity", "ParseErrorClass", "isParenthesizedExpression", "nextAncestor", "child", "declareNameFromIdentifier", "identifier", "allowPattern", "nonNull", "x", "assert", "TSErrors", "AbstractMethodHasImplementation", "methodName", "AbstractPropertyHasInitializer", "propertyName", "AccessorCannotBeOptional", "ClassMethodHasDeclare", "ClassMethodHasReadonly", "ConstructorHasTypeParameters", "DeclareAccessor", "DeclareClassFieldHasInitializer", "DeclareFunctionHasImplementation", "DuplicateAccessibilityModifier", "modifier", "DuplicateModifier", "EmptyHeritageClauseType", "EmptyTypeArguments", "EmptyTypeParameters", "ExpectedAmbientAfterExportDeclare", "ImportAliasHasImportType", "IncompatibleModifiers", "modifiers", "IndexSignatureHasAbstract", "IndexSignatureHasAccessibility", "IndexSignatureHasDeclare", "IndexSignatureHasOverride", "IndexSignatureHasStatic", "InitializerNotAllowedInAmbientContext", "InvalidHeritageClauseType", "InvalidModifierOnTypeMember", "InvalidModifierOnTypeParameter", "InvalidModifierOnTypeParameterPositions", "InvalidModifiersOrder", "orderedModifiers", "InvalidPropertyAccessAfterInstantiationExpression", "InvalidTupleMemberLabel", "MissingInterfaceName", "NonAbstractClassHasAbstractMethod", "NonClassMethodPropertyHasAbstractModifer", "OptionalTypeBeforeRequired", "OverrideNotInSubClass", "PrivateElementHasAbstract", "PrivateElementHasAccessibility", "ReadonlyForMethodSignature", "ReservedArrowTypeParam", "ReservedTypeAssertion", "SingleTypeParameterWithoutTrailingComma", "typeParameterName", "StaticBlockCannotHaveModifier", "TupleOptionalAfterType", "TypeAnnotationAfterAssign", "TypeImportCannotSpecifyDefaultAndNamed", "TypeModifierIsUsedInTypeExports", "TypeModifierIsUsedInTypeImports", "UnexpectedParameterModifier", "UnexpectedReadonly", "UnexpectedTypeAnnotation", "UnexpectedTypeCastInParameter", "UnsupportedImportTypeArgument", "UnsupportedParameterPropertyKind", "UnsupportedSignatureParameterKind", "keywordTypeFromName", "tsIsAccessModifier", "tsIsVarianceAnnotations", "typescript", "TypeScriptParserMixin", "tsParseInOutModifiers", "tsParseModifiers", "bind", "allowedModifiers", "disallowedModifiers", "errorTemplate", "tsParseConstModifier", "tsParseInOutConstModifiers", "tsIsIdentifier", "tsTokenCanFollowModifier", "tsNextTokenOnSameLineAndCanFollowModifier", "tsNextTokenCanFollowModifier", "tsParseModifier", "stopOnStartOfClassStaticBlock", "tsIsStartOfStaticBlocks", "tsTryParse", "modified", "enforceOrder", "before", "after", "incompatible", "mod1", "mod2", "accessibility", "hasOwnProperty", "tsIsListTerminator", "tsParseList", "parseElement", "tsParseDelimitedList", "refTrailingCommaPos", "tsParseDelimitedListWorker", "expectSuccess", "trailingCommaPos", "tsParseBracketedList", "bracket", "skipFirstToken", "tsParseImportType", "qualifier", "tsParseEntityName", "tsParseEntityNameFlags", "tsParseTypeArguments", "tsParseTypeReference", "typeName", "tsParseThisTypePredicate", "lhs", "parameterName", "tsParseTypeAnnotation", "asserts", "tsParseThisTypeNode", "tsParseTypeQuery", "exprName", "tsParseTypeParameter", "parseModifiers", "tsParseTypeParameterName", "constraint", "tsEatThenParseType", "tsTryParseTypeParameters", "tsParseTypeParameters", "tsFillSignature", "returnToken", "signature", "returnTokenRequired", "paramsKey", "returnTypeKey", "tsParseBindingListForSignature", "tsParseTypeOrTypePredicateAnnotation", "tsParseTypeMemberSemicolon", "tsParseSignatureMember", "tsIsUnambiguouslyIndexSignature", "tsTryParseIndexSignature", "tsLookAhead", "parameters", "tsTryParseTypeAnnotation", "tsParsePropertyOrMethodSignature", "readonly", "nodeAny", "firstParameter", "tsParseTypeMember", "idx", "tsParseTypeLiteral", "tsParseObjectTypeMembers", "tsIsStartOfMappedType", "tsParseMappedType", "tsExpectThenParseType", "nameType", "tsParseType", "tsTryParseType", "tsParseTupleType", "elementTypes", "tsParseTupleElementType", "seenOptionalElement", "elementNode", "restStartLoc", "labeled", "isWord", "chAfterWord", "wordName", "typeOrLabel", "tsParseNonArrayType", "labeledNode", "optionalTypeNode", "restNode", "tsParseParenthesizedType", "tsParseFunctionOrConstructorType", "abstract", "tsInAllowConditionalTypesContext", "tsParseLiteralTypeNode", "tsParseTemplateLiteralType", "parseTemplate", "parseTemplateSubstitution", "tsParseThisTypeOrThisTypePredicate", "thisKeyword", "parseMaybeUnary", "nodeType", "tsParseArrayTypeOrHigher", "tsParseTypeOperator", "tsParseTypeOperatorOrHigher", "tsCheckTypeAnnotationForReadOnly", "tsParseInferType", "tsParseConstraintForInferType", "tsInDisallowConditionalTypesContext", "isTypeOperator", "tsParseUnionOrIntersectionType", "parseConstituentType", "hasLeadingOperator", "tsParseIntersectionTypeOrHigher", "tsParseUnionTypeOrHigher", "tsIsStartOfFunctionType", "tsIsUnambiguouslyStartOfFunctionType", "tsSkipParameterStart", "previousErrorCount", "_unused2", "tsInType", "t", "tsParseTypePredicateAsserts", "thisTypePredicate", "typePredicateVariable", "tsParseTypePredicatePrefix", "tsTryParseTypeOrTypePredicateAnnotation", "eatColon", "tsParseNonConditionalType", "checkType", "extendsType", "trueType", "falseType", "isAbstractConstructorSignature", "tsParseTypeAssertion", "tsParseHeritageClause", "originalStartLoc", "delimitedList", "tsParseInterfaceDeclaration", "tsParseTypeAliasDeclaration", "tsInTopLevelContext", "oldInDisallowConditionalTypesContext", "tsNextThenParseType", "tsParseEnumMember", "initializer", "tsParseEnumDeclaration", "tsParseEnumBody", "tsParseModuleBlock", "parseBlockOrModuleBlockBody", "tsParseModuleOrNamespaceDeclaration", "nested", "inner", "tsParseAmbientExternalModuleDeclaration", "global", "tsParseImportEqualsDeclaration", "maybeDefaultIdentifier", "moduleReference", "tsParseModuleReference", "tsIsExternalModuleReference", "tsParseExternalModuleReference", "f", "tsTryParseAndCatch", "tsTryParseDeclare", "nany", "startType", "tsInAmbientContext", "parseFunctionStatement", "parseClass", "parseVarStatement", "tsParseDeclaration", "tsTryParseExportDeclaration", "tsParseExpressionStatement", "mod", "tsCheckLineTerminator", "tsParseAbstractDeclaration", "tsTryParseGenericAsyncArrowFunction", "oldMaybeInArrowParameters", "tsParseTypeArgumentsInExpression", "tsIsDeclarationStart", "override", "pp", "parameter", "isSimpleParameter", "tsDisallowOptionalPattern", "bodilessType", "registerFunctionStatementId", "tsCheckForInvalidTypeCasts", "items", "isInParens", "nonNullExpression", "isOptionalCall", "missingParenErrorLoc", "atPossibleAsyncArrow", "asyncArrowFn", "parseTaggedTemplateExpression", "tokenType", "_callee$extra", "parseExprOp", "leftStartLoc", "minPrec", "isSatisfies", "checkKeywords", "checkDuplicateExports", "importNode", "parseMaybeImportPhase", "parseImportSpecifiersAndAfter", "nodeImportEquals", "isAbstractClass", "cls", "allowMissingInitializer", "declarations", "isValidAmbientConstInitializer", "parseStatementContent", "parseAccessModifier", "tsHasSomeModifiers", "callParseClassMemberWithIsStatic", "parseClassStaticBlock", "parseClassMemberWithIsStatic", "hadSuperClass", "parsePostMemberNameModifiers", "methodOrProp", "isDeclare", "isIdentifier", "parseClassPropertyAnnotation", "definite", "declareClassPrivateMethodInScope", "_typeCast", "_typeCast2", "typeCast", "_typeParameters", "reportReservedArrowTypeParam", "trailingComma", "sawUnary", "toAssignableParenthesizedExpression", "parseMaybeDecoratorArguments", "canHaveLeadingDecorator", "getGetterSetterExpectedParamCount", "baseCount", "firstParam", "hasContextParam", "parseCatchClauseParam", "oldIsAmbientContext", "oldStrict", "oldInAbstractClass", "maybeTakeDecorators", "hasEstreePlugin", "methodFn", "shouldParseAsAmbientContext", "getExpression", "parseExportSpecifier", "isString", "isInTypeExport", "parseTypeOnlyImportExportSpecifier", "isImport", "isInTypeOnlyImportExport", "leftOfAsKey", "rightOfAsKey", "leftOfAs", "rightOfAs", "hasTypeSpecifier", "canParseAsKeyword", "firstAs", "secondAs", "parseModuleExportName", "kindKey", "isPossiblyLiteralEnum", "expressions", "isUncomputedMemberExpressionChain", "isNumber", "isNegativeNumber", "PlaceholderErrors", "ClassNameIsRequired", "UnexpectedSpace", "placeholders", "PlaceholdersParserMixin", "parsePlaceholder", "assertNoSpace", "finishPlaceholder", "chStartsBindingIdentifier", "verifyBreakContinue", "isBreak", "parseStatementOrSloppyAnnexBFunctionDeclaration", "stmtPlaceholder", "parseBlock", "createNewLexicalScope", "parseFunctionId", "requireId", "parseClassBody", "startsWith", "maybeParseExportDefaultSpecifier", "_specifiers", "checkExport", "filter", "hasStarImport", "maybeParseStarImportSpecifier", "parseNamedImportSpecifiers", "parseImportSource", "v8intrinsic", "V8IntrinsicMixin", "parseV8Intrinsic", "v8IntrinsicStartLoc", "parseIdentifierName", "PIPELINE_PROPOSALS", "TOPIC_TOKENS", "validatePlugins", "pluginsMap", "decoratorsBeforeExport", "allowCallParenthesized", "_pluginsMap$get", "proposalList", "p", "tupleSyntaxIsHash", "syntaxType", "tokenList", "moduleAttributesVersionPluginOption", "version", "deprecatedAssertSyntax", "RECORD_AND_TUPLE_SYNTAX_TYPES", "missingPlugins", "mixinPlugins", "mixinPluginNames", "ExpressionParser", "checkProto", "isRecord", "sawProto", "shouldExitDescending", "disallowIn", "disallowInAnd", "parseExpressionBase", "allowInAnd", "parseMaybeAssignDisallowIn", "isYield", "parseYield", "ownExpressionErrors", "parseMaybeConditional", "isAmbiguousPrefixOrIdentifier", "parseExprOps", "parseMaybeUnaryOrPrivate", "op", "prec", "checkPipelineAtInfixOperator", "logical", "coalesce", "parseExprOpRightExpr", "finishedNode", "nextOp", "withTopicBindingContext", "parseHackPipeBody", "withSoloAwaitPermittingContext", "parseFSharpPipelineBody", "parseSmartPipelineBodyInStyle", "parseExprOpBaseRightExpr", "_body$extra", "requiredParentheses", "topicReferenceWasUsedInCurrentContext", "checkExponentialAfterUnary", "isAwait", "recordAwaitIfAllowed", "parseAwait", "update", "isDelete", "parseUpdate", "updateExpressionNode", "parseExprSubscripts", "maybeAsyncArrow", "parseBind", "parseCoverCallAndAsyncArrowHead", "parseMember", "parseNoCallExpr", "tag", "quasi", "allowPlaceholder", "nodeForExtra", "oldInFSharpPipelineDirectBody", "addTrailingCommaExtraToNode", "parseExprListItem", "_call$extra", "parseSuper", "parseImportMetaProperty", "parseImportCall", "parseDo", "parseFunctionOrFunctionSent", "parseDecorators", "parseNewOrNewTarget", "parseTopicReferenceThenEqualsSign", "parseTopicReference", "pipeProposal", "parseModuleExpression", "parseAsyncFunctionExpression", "parseAsyncArrowUnaryFunction", "topicTokenType", "topicTokenValue", "finishTopicReference", "testTopicReferenceConfiguration", "topicReferenceIsAllowedInCurrentContext", "registerTopicReference", "meta", "parseMetaProperty", "parseFunction", "isSource", "innerStartLoc", "spreadStartLoc", "optionalCommaStartLoc", "spreadNodeStartLoc", "innerEndLoc", "arrowNode", "wrapParenthesis", "parenExpression", "metaProp", "parseNew", "parseExprList", "parseTemplateElement", "isTagged", "elemStart", "elem", "isTail", "endOffset", "elemEnd", "cooked", "tail", "curElt", "quasis", "substitutions", "parsePropertyDefinition", "maybeAsyncOrAccessorProp", "keyName", "_params", "finishedProp", "generator", "isExpression", "hasStrictModeDirective", "nonSimple", "isSimpleParamList", "formalParameters", "reservedTest", "isAwaitAllowed", "delegating", "delegate", "childExpr", "isSimpleReference", "checkSmartPipeTopicBodyEarlyErrors", "callback", "outerContextTopicState", "withSmartMixTopicForbiddingContext", "outerContextSoloAwaitState", "prodParamToSet", "ParamKind", "prodParamToClear", "ret", "revertScopes", "parseProgram", "loopLabel", "switchLabel", "loneSurrogate", "keywordRelationalOperator", "babel7CompatTokens", "hashEndPos", "hashEndLoc", "backquoteEnd", "backquoteEndLoc", "startToken", "templateValue", "templateElementEnd", "templateElementEndLoc", "endToken", "StatementParser", "interpreter", "parseInterpreterDirective", "finishedProgram", "stmtToDirective", "directiveLiteral", "hasFollowingBindingAtom", "endCh", "chStartsBindingPattern", "hasInLineFollowingBindingIdentifierOrBrace", "startsUsingForOf", "startsAwaitUsing", "parseModuleItem", "ParseStatementFlag", "parseStatementListItem", "allowLabeledFunction", "parseStatement", "allowDeclaration", "allowFunctionDeclaration", "parseBreakContinueStatement", "parseDebuggerStatement", "parseDoWhileStatement", "parseForStatement", "parseIfStatement", "parseReturnStatement", "parseSwitchStatement", "parseThrowStatement", "parseTryStatement", "parseWhileStatement", "parseWithStatement", "parseEmptyStatement", "nextTokenCharCode", "isAsyncFunction", "maybeName", "parseLabeledStatement", "decoratorsEnabledBeforeExport", "maybeDecorators", "classNode", "exportNode", "_classNode$decorators", "allowExport", "paramsStartLoc", "lab", "parseHeaderExpression", "awaitAt", "parseFor", "startsWithLet", "startsWithAwaitUsing", "starsWithUsingDeclaration", "isLetOrUsing", "initNode", "parseVar", "isForIn", "parseForIn", "startsWithAsync", "isForOf", "isHangingDeclaration", "ParseFunctionFlag", "discriminant", "cases", "cur", "sawDefault", "isCase", "block", "handler", "clause", "finalizer", "statementStart", "parsedNonDirective", "await", "isFor", "hangingDeclaration", "isDeclaration", "hadConstructor", "publicMethod", "privateMethod", "publicProp", "privateProp", "accessorProp", "publicMember", "parseClassElementName", "maybeContextualKw", "isPrivate", "maybeQuestionTokenStartLoc", "pushClassPrivateProperty", "pushClassProperty", "pushClassAccessorProperty", "_member$decorators", "parseInitializer", "hasDefault", "parseAfterDefault", "hasStar", "parseAfterNamespace", "isFromRequired", "hasSpecifiers", "maybeParseExportNamedSpecifiers", "hasDeclaration", "maybeParseExportDeclaration", "_node2$declaration", "_ref$specifiers", "isTypeExport", "assertions", "nextType", "hasFrom", "nextAfterFrom", "maybeParseImportAttributes", "checkJSONModuleImport", "checkNames", "isDefault", "isFrom", "_node$specifiers", "_declaration$extra", "nodes", "surrogate", "isJSONModuleImport", "singleBindingType", "_node$assertions", "nonDefaultNamedSpecifier", "find", "phaseIdentifier", "isImportPhase", "isPrecedingIdImportPhase", "parseImportSourceAndAttributes", "maybeParseDefaultImportSpecifier", "parseNext", "_node$specifiers2", "parseImportAttributes", "attrs", "attrNames", "parseModuleAttributes", "useWith", "importSpecifier", "Parser", "_options", "getParser", "ast", "moduleError", "generateExportedTokenTypes", "internalTokenTypes", "tokTypes", "getParserClass", "parserClassCache", "pluginList"]
}
